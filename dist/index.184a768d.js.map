{"mappings":"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","sources":["./scripts/Geocoding.js","./scripts/Utilities.js","./scripts/Animations.js","./scripts/RenderMethods.js","./index.js","./scripts/WeatherApp.js","./scripts/AutocompleteSearchBar.js"],"sourcesContent":["class Geocoding {\r\n    static geocode(location){\r\n        return new Promise(\r\n            (resolve, reject) => {\r\n                fetch(`https://blooming-sands-36961.herokuapp.com/geocode?address=${location}`)\r\n                    .then(response => response.json())\r\n                    .then((data) => {\r\n                        resolve(data);\r\n                    })\r\n                    .catch(err => {\r\n                        reject(err)\r\n                    });\r\n            }\r\n        )\r\n    };\r\n    \r\n    static reverseGeocode(lat, lon, API){\r\n        return new Promise(\r\n            (resolve, reject) => {\r\n                fetch(`https://blooming-sands-36961.herokuapp.com/reversegeocode?lat=${lat}&lon=${lon}`)\r\n                    .then(response => response.json())\r\n                    .then((data) => {\r\n                        resolve(data.results[0].address_components[0].long_name);\r\n                    })\r\n                    .catch(err => {\r\n                        reject(err);\r\n                    });\r\n            }\r\n        )\r\n    };\r\n}\r\n\r\nexport default Geocoding;","class Utilities {\r\n    static getDateTime(timezone){\r\n        const time = luxon.DateTime;\r\n        return time.now().setZone(timezone);\r\n    }\r\n\r\n    static toCelsius(num){\r\n        return (num - 32) * 5 / 9;\r\n    }\r\n\r\n    static isDay(timezone){\r\n        const hour = this.getDateTime(timezone).hour;\r\n    \r\n        if(hour > 5 && hour < 18) { return true; }\r\n    \r\n        return false;\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    // https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\r\n    static shuffle(a){\r\n        var j, x, i;\r\n        for (i = a.length - 1; i > 0; i--) {\r\n            j = Math.floor(Math.random() * (i + 1));\r\n            x = a[i];\r\n            a[i] = a[j];\r\n            a[j] = x;\r\n        }\r\n        return a;\r\n    }\r\n\r\n    static toggleHidden(element){\r\n        return element.classList.toggle('hidden');\r\n    }\r\n\r\n    static toggleDisabled(element){\r\n        if(element.disabled === true){ \r\n            return element.disabled = false;\r\n        }\r\n        return element.disabled = true;\r\n    }\r\n}\r\n\r\nexport default Utilities;","import Utilities from './Utilities.js';\r\n\r\nclass Animations {\r\n\r\n    // the element where animations will be injected\r\n    static background = document.querySelector('.js-animations');\r\n    static foregroundImageElement = document.querySelector('.js-foregroundImage');\r\n\r\n    // variable to save/clear lightning animation interval\r\n    static lightningInterval;\r\n\r\n    // color palette for clear sky background, dark to light\r\n    static defaultColorPalette = [\r\n        [56, 51, 105],\r\n        [106, 57, 116],\r\n        [152, 63, 117],\r\n        [192, 74, 109],\r\n        [221, 95, 94],\r\n        [233, 104, 109],\r\n        [244, 113, 124],\r\n        [255, 122, 139],\r\n        [242, 130, 188],\r\n        [206, 149, 227],\r\n        [155, 168, 247],\r\n        [101, 183, 246]\r\n    ];\r\n\r\n    // color palette for cloudy sky background, dark to light\r\n    static defaultGrayScalePalette = [\r\n        [40, 39, 49],\r\n        [51, 50, 59],\r\n        [62, 61, 70],\r\n        [73, 72, 81],\r\n        [85, 84, 92],\r\n        [97, 96, 103],\r\n        [9, 108, 115],\r\n        [122, 121, 127],\r\n        [134, 134, 139],\r\n        [147, 147, 151],\r\n        [161, 160, 164],\r\n        [174, 173, 176],\r\n        [187, 187, 189],\r\n        [201, 201, 202],\r\n        [215, 215, 215]\r\n    ];\r\n\r\n    // clear all current particles\r\n    static clearParticles(){\r\n        const particles = Array.from(document.getElementsByClassName('js-gfx'));\r\n        if(particles.length > 0){\r\n            particles.forEach(el => el.remove());\r\n        }\r\n    }\r\n\r\n    // pause all current particle animations\r\n    static toggleParticleAnimations(){\r\n        const particles = Array.from(document.getElementsByClassName('js-gfx'));\r\n        if(particles.length > 0){\r\n            particles.forEach(el => el.classList.toggle('paused'));\r\n        }\r\n    }\r\n\r\n    // create new particles (Rain or Snow)\r\n    static drawParticles(type, num){\r\n    \r\n        let classes = type === 'Rain' ? ['fas', 'fa-tint', 'rain', 'particle', 'js-gfx'] : ['fas', 'fa-snowflake', 'snow', 'particle', 'js-gfx'];\r\n        let speed = type === 'Rain' ? 500 : 2000;\r\n\r\n        // randomize each particle\r\n        for(let x = 0; x < num; x++){\r\n            let particle = document.createElement('i');\r\n            particle.alt = \"\"; //allows screen readers to ignore particle\r\n            particle.style.left = `${Math.floor(Math.random() * 100)}%`;\r\n            particle.style.top = `${Math.floor(Math.random() * (20 - 10) + 10)}%`;\r\n            particle.style.animationDelay = `${Math.floor(500 + (Math.random() * 1000))}ms`;\r\n            particle.style.animationDuration = `${Math.floor(speed + (Math.random() * 1000))}ms`;\r\n            classes.forEach(el => particle.classList.add(el));\r\n            this.background.appendChild(particle);\r\n        }\r\n        \r\n    }\r\n\r\n    // determine number of clouds based on level of cloudiness (0-100%),\r\n    // according to OpenWeather API status codes\r\n    static getNumClouds(num){\r\n        switch (num) {\r\n        case 801:\r\n            return 2;\r\n        case 802:\r\n            return 3;\r\n        case 803:\r\n            return 4;\r\n        case 804:\r\n            return 5;\r\n        default:\r\n            return 1;\r\n        }\r\n    };\r\n\r\n    static drawClouds(numClouds, timezone){\r\n    \r\n        let num = numClouds;\r\n\r\n        // num can only be a number between 1 and 5\r\n        if(num < 0){\r\n            num = 1;\r\n        }\r\n\r\n        if(num > 5){\r\n            num = 5;\r\n        }\r\n\r\n        //randomize clouds\r\n        let clouds = Utilities.shuffle([1,2,3,4,5]);\r\n\r\n        const day = Utilities.isDay(timezone);\r\n\r\n        // create clouds\r\n        for(let x = 0; x < num; x++){\r\n            let cloud = document.createElement('img');\r\n            //clouds provided by https://www.youtube.com/watch?v=FWW38GuIo7M\r\n            cloud.src = `../images/cloud${x + 1}.png`; \r\n            cloud.alt = \"\"; //allows screen readers to ignore clouds\r\n            cloud.classList.add('cloud', `speed-${clouds[x]}`, 'js-gfx');\r\n            // clouds have half-opacity at night time for aesthetic purposes\r\n            if(!day){ cloud.classList.add('half-opacity'); }\r\n            this.background.appendChild(cloud);\r\n        }\r\n        \r\n    }\r\n\r\n    static drawLightning(){\r\n        const lightning = document.createElement('div');\r\n        lightning.classList.add('lightning', 'js-gfx');\r\n        this.background.appendChild(lightning);\r\n\r\n        // reset\r\n        if(this.lightningInterval){ clearInterval(this.lightningInterval); }\r\n\r\n        // times were chosen to prevent constant flashing\r\n        // and prevent animations being cut off between cycles\r\n        setInterval(() => {\r\n            setTimeout(() => {\r\n                lightning.classList.add('lightning-animation');\r\n                setTimeout(() => {\r\n                    lightning.classList.remove('lightning-animation');\r\n                }, 2000);\r\n            }, (Math.random() * (12000 - 6000) + 6000)); \r\n            \r\n        }, 6000); \r\n        \r\n    }\r\n\r\n    static drawAtmosphere(type){\r\n        let weatherClass = '';\r\n\r\n        if(!type){\r\n            weatherClass = 'fog';\r\n        }\r\n\r\n        if(type === 'Sand' || type === 'Dust'){\r\n            weatherClass = 'sand'; \r\n        } else {\r\n            weatherClass = 'fog';\r\n        }\r\n\r\n        const atmosphereLayer1 = document.createElement('div');\r\n        atmosphereLayer1.classList.add('atmosphere', 'layer-1', `${weatherClass}-1`, 'fade', 'js-gfx');\r\n        this.background.appendChild(atmosphereLayer1);\r\n\r\n        const atmosphereLayer2 = document.createElement('div');\r\n        atmosphereLayer2.classList.add('atmosphere', 'layer-2', `${weatherClass}-2`, 'fade', 'js-gfx');\r\n        this.background.appendChild(atmosphereLayer2);\r\n    }\r\n    \r\n\r\n    static animateWeatherGFX(weather, {id, timezone}){\r\n\r\n        // reset\r\n        this.clearParticles();\r\n\r\n        switch (weather) {\r\n            case 'Clouds':\r\n              this.drawClouds(this.getNumClouds(id));\r\n              break;\r\n            case 'Thunderstorm':\r\n              this.drawClouds(5, timezone);\r\n              this.drawParticles('Rain', 50);\r\n              this.drawLightning();\r\n              break;\r\n            case 'Drizzle':\r\n              this.drawClouds(4, timezone);\r\n              this.drawParticles('Rain', 15);\r\n              break;\r\n            case 'Rain':\r\n              this.drawClouds(5, timezone);\r\n              this.drawParticles('Rain', 25);\r\n              break;\r\n            case 'Snow':\r\n              this.drawClouds(5, timezone);\r\n              this.drawParticles('Snow', 40);\r\n              break;\r\n            case 'Mist':\r\n            case 'Ash':\r\n            case 'Fog':\r\n            case 'Smoke':\r\n            case 'Haze':\r\n              this.drawClouds(3, timezone);\r\n              this.drawAtmosphere('Fog');\r\n              break;\r\n            case 'Dust':\r\n            case 'Sand':\r\n              this.drawClouds(3, timezone);\r\n              this.drawAtmosphere('Sand');\r\n              break;\r\n            case 'Squall':\r\n            case 'Tornado':\r\n            case 'Clear':\r\n              break;\r\n            default:\r\n              console.error('Invalid weather condition.');\r\n          }\r\n        \r\n    }\r\n\r\n    // generate an array of times for each color \r\n    static getStages(startTime, endTime, numStages){\r\n        const arr = [];\r\n        const range = endTime - startTime;\r\n        const fraction = range / numStages;\r\n        for(let i = 0; i < numStages; i++){\r\n            arr.push(Math.round((fraction * i) + startTime));\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    // determine which two stages the current time is between \r\n    // or return -1 if current time is not between any stages\r\n    // returns an array of objects containing the two stages \r\n    // as well as their indices in color palette\r\n    static getNearestStages(stages, currentTime){\r\n        for(let i = 0; i < stages.length - 1; i++){\r\n            if(currentTime >= stages[i] && currentTime <= stages[i + 1]){\r\n                return [{stage: stages[i], index: i}, {stage: stages[i + 1], index: i + 1}]; \r\n            }\r\n        }\r\n      \r\n        return -1;\r\n    }\r\n\r\n    // calculate what % between nearest two stages current time is\r\n    static percentToNextStage(a, b, c){\r\n        return ((c - a) / (b - a)) * 100;\r\n    }\r\n\r\n    // calculate the color based on what % between nearest two stages current time is\r\n    static calculateColor(colors, nearestStages, currentTime){\r\n      \r\n        const calc = (colorA, colorB, multiplicand) => {\r\n            const val = Math.floor((colorA - colorB) * multiplicand + colorA);\r\n            \r\n            // prevent values from exceeding maximum RGB value\r\n            if(val > 255){\r\n                return 255;\r\n            }\r\n\r\n            return val;\r\n        }\r\n            \r\n        \r\n        let mult = this.percentToNextStage(nearestStages[0].stage, nearestStages[1].stage, currentTime) / 100;\r\n  \r\n        let colorA = colors[nearestStages[0].index];\r\n        let colorB = colors[nearestStages[1].index];\r\n    \r\n        //an array of RGB values\r\n        let newColor = [];\r\n  \r\n        newColor.push(calc(colorA[0], colorB[0], mult));\r\n        newColor.push(calc(colorA[1], colorB[1], mult));\r\n        newColor.push(calc(colorA[2], colorB[2], mult));\r\n  \r\n        return newColor;\r\n         \r\n    }\r\n\r\n    // set the background to a new color\r\n    static setColor(color){\r\n        // use decimal to pick second shade for gradient that is ~10% darker than first shade\r\n        const decimal = .9;\r\n        this.background.style.background = `\r\n          linear-gradient(to top, rgb(${color[0]}, ${color[1]}, ${color[2]}), rgb(${Math.floor(color[0] * decimal)}, ${Math.floor(color[1] * decimal)}, ${Math.floor(color[2] * decimal)})\r\n        `;\r\n    }\r\n\r\n    static paintBackground(weather, {sunrise, sunset}, colorPalette = this.defaultColorPalette, grayScalePalette = this.defaultGrayScalePalette){\r\n\r\n        // --- A Brief Explanation of paintBackground() ---\r\n\r\n        // (time calculatons are done in UNIX time)\r\n\r\n        // sunrise & sunset are treated as an hour that is broken up into stages\r\n        //   based on the number of colors in the given palette;\r\n        //   each stage represents a point in time.\r\n        \r\n        // ex: if palette has 16 colors, then hour is broken up into 16 stages\r\n        //   from start to end\r\n        \r\n        // the current time is checked against a list of stages (points in time), \r\n        //   and then a color is assigned based on what % of the way between two stages \r\n        //   the current time is\r\n        \r\n        // ex: if current time is 20% between stage 1 & stage 2 of the hour, then\r\n        //   the color calculated will be the value that is 20% of the way between \r\n        //   palette[1] and palette[2], so if palette[1] has an R value of 100, \r\n        //   and palette[2] has an R value of 200, then the R value for the new color \r\n        //   will be 120.\r\n\r\n        // Resources used for color interpolation:\r\n        // https://graphicdesign.stackexchange.com/questions/83866/generating-a-series-of-colors-between-two-colors/83869\r\n        // https://stackoverflow.com/questions/13488957/interpolate-from-one-color-to-another\r\n        \r\n\r\n        // reset\r\n        this.background.style.background = '';\r\n        this.foregroundImageElement.style.opacity = 1;\r\n      \r\n        // decide whether to use colors for clear sky or cloudy\r\n        let colors = [];\r\n      \r\n        if(weather === 'Clear' || weather === 'Clouds'){\r\n            colors = colorPalette;\r\n        } else {\r\n            colors = grayScalePalette;\r\n        }\r\n\r\n        // 3600, number of seconds in an hour\r\n        const hour = 3600; \r\n\r\n        \r\n        //get current timeUtilities.getDateTime(timezone)\r\n        let currentTime = Math.floor(Date.now() / 1000); //change time here for testing i.e +(hour * 3)\r\n        \r\n        // --- Night ---\r\n        // if the current time is less than sunrise, it's night\r\n        if(currentTime < sunrise){\r\n            // foregroundImageElement (hills) have opacity ajusted at different times\r\n            //   for aesthetic purposes\r\n            this.foregroundImageElement.style.opacity = 0.5;\r\n            this.setColor(colors[0]);\r\n            return;\r\n        } \r\n\r\n        // --- Sunrise ---\r\n        // if the current time is sunrise or equal to or less than an hour later than sunrise, it's sunrise\r\n        if(currentTime >= sunrise && currentTime <= (sunrise + hour)){\r\n            let stages = this.getStages(sunrise, sunrise + hour, colors.length);\r\n            let nearestStages = this.getNearestStages(stages, currentTime);\r\n\r\n            \r\n            this.foregroundImageElement.style.opacity = 0.75;\r\n\r\n            if(nearestStages === -1){\r\n                this.setColor(colors[colors.length - 1]);\r\n                return;\r\n              }\r\n\r\n            this.setColor(this.calculateColor(colors, nearestStages, currentTime));\r\n            return;\r\n        }\r\n\r\n        // --- Day ---\r\n        // if the current time is later than an hour after sunrise\r\n        //   and less than hour before sunset, it's day\r\n        if(currentTime > (sunrise + hour) && currentTime < (sunset - hour)){\r\n            this.setColor(colors[colors.length - 1]);\r\n            return;\r\n        }\r\n\r\n        // --- Sunset ---\r\n        // if the current time is equal to or later than an hour before sunset\r\n        //   and sooner than or equal to sunset, it's sunset\r\n        if(currentTime >= (sunset - hour) && currentTime <= sunset){\r\n            let stages = this.getStages(sunset - hour, sunset, colors.length);\r\n            let nearestStages = this.getNearestStages(stages, currentTime);\r\n\r\n            this.foregroundImageElement.style.opacity = 0.75;\r\n\r\n            if(nearestStages === -1){\r\n                this.setColor(colors[0]);\r\n                return;\r\n            }\r\n\r\n            // for sunset, colors should transition from light to dark (reverse order of color palette)\r\n            this.setColor(this.calculateColor(colors.slice().reverse(), nearestStages, currentTime));\r\n            return\r\n        }\r\n\r\n        // --- Night ---\r\n        // no other options\r\n        this.foregroundImageElement.style.opacity = 0.5;\r\n        this.setColor(colors[0]);\r\n        return;\r\n\r\n      }\r\n}\r\n\r\nexport default Animations;","import Utilities from './Utilities.js';\r\n\r\nclass RenderMethods {\r\n\r\n    static getIcon(id, status, timezone){\r\n\r\n        let clear;\r\n        let clouds;\r\n    \r\n        if(Utilities.isDay(timezone)){\r\n            clear = ['fas', 'fa-sun'];\r\n            clouds = ['fas', 'fa-cloud-sun'];\r\n        } else {\r\n            clear = ['fas', 'fa-moon'];\r\n            clouds = ['fas', 'fa-cloud-moon'];\r\n        }\r\n    \r\n        switch(status){\r\n            case 'Thunderstorm': return ['fas', 'fa-bolt']; \r\n            case 'Drizzle': return ['fas', 'fa-cloud-rain']; \r\n            case 'Rain': return ['fas', 'fa-cloud-showers-heavy']; \r\n            case 'Snow': return ['fas', 'fa-snowflake']; \r\n            case 'Mist':\r\n            case 'Smoke':\r\n            case 'Haze':\r\n            case 'Dust':\r\n            case 'Fog':\r\n            case 'Sand':\r\n            case 'Ash': \r\n            case 'Squall':\r\n            case 'Tornado': return ['fas', 'fa-smog'];  //specific tornado icon availible with font-awesome pro\r\n            case 'Clear': return clear;\r\n            case 'Clouds': \r\n                if(Number.parseInt(id) < 803){\r\n                    return  clouds;\r\n                } else {\r\n                    return ['fas', 'fa-cloud']\r\n                };\r\n            default: return ['fas', 'fa-cloud'];\r\n        }\r\n    }\r\n\r\n    static displayWeather({id, weather, timezone}){\r\n        const weatherIconElement = document.querySelector('.js-weatherIcon');\r\n        \r\n        // reset\r\n        weatherIconElement.classList = 'weather__icon font-lg js-weatherIcon';\r\n\r\n        const weatherStatusElement = document.querySelector('.js-weatherStatus');\r\n        let classes = [];\r\n    \r\n        classes = this.getIcon(id, weather, timezone);\r\n    \r\n        classes.forEach(el => weatherIconElement.classList.add(el));\r\n        weatherStatusElement.innerHTML = weather;\r\n    }\r\n\r\n    static displayTemperature({temperature, feels_like, max, min, unit}){\r\n        let temperatures = [temperature, feels_like, max, min].map((el) => {\r\n            if(unit === 'celsius'){\r\n                el = Utilities.toCelsius(el);\r\n            }\r\n            return Math.round(el);\r\n        });\r\n    \r\n        const deg = (unit === 'celsius') ? 'C' : 'F';\r\n        \r\n        const temperatureElement = document.querySelector('.js-temperature');\r\n        temperatureElement.innerHTML = `${temperatures[0]}&deg;${deg}`;\r\n    \r\n        const feelsLikeElement = document.querySelector('.js-feelsLike');\r\n        feelsLikeElement.innerHTML = `Feels like ${temperatures[1]}&deg;${deg}`;\r\n    \r\n        const highTemperatureElement = document.querySelector('.js-highTemperature');\r\n        highTemperatureElement.innerHTML = `High: ${temperatures[2]}&deg;${deg}`;\r\n    \r\n        const lowTemperatureElement = document.querySelector('.js-lowTemperature');\r\n        lowTemperatureElement.innerHTML = `Low: ${temperatures[3]}&deg;${deg}`;\r\n    }\r\n\r\n    static displayForecast({forecast, unit}){\r\n        const dailyForecasts = forecast.slice(1);\r\n    \r\n        const rootElement = document.querySelector('.js-forecast');\r\n        while(rootElement.firstChild){\r\n            rootElement.firstChild.remove();\r\n        }\r\n\r\n        const forecastTitleElement = document.createElement('h3');\r\n        forecastTitleElement.classList.add('forecast__title', 'font-med');\r\n        forecastTitleElement.innerText = '7 Day Forecast:';\r\n        rootElement.appendChild(forecastTitleElement);\r\n\r\n        const forecastContainerElement = document.createElement('div');\r\n        forecastContainerElement.classList.add('forecast__container');\r\n        forecastTitleElement.appendChild(forecastContainerElement);\r\n    \r\n        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        let dayOfTheWeek = new Date().getUTCDay();\r\n    \r\n        dailyForecasts.forEach(el => {\r\n            const max = (unit === 'celsius') ? Utilities.toCelsius(el.temp.max) : el.temp.max;\r\n            const min = (unit === 'celsius') ? Utilities.toCelsius(el.temp.min) : el.temp.min;\r\n            \r\n            // one forecastSubcontainerElement for each day of the week\r\n            const forecastSubcontainerElement = document.createElement('div');\r\n            forecastSubcontainerElement.classList.add('forecast__subcontainer');\r\n    \r\n            const dayNameElement = document.createElement('p');\r\n            dayOfTheWeek += 1;\r\n            if(dayOfTheWeek < 7){\r\n                dayNameElement.innerText = days[dayOfTheWeek];\r\n            } else {\r\n                dayOfTheWeek = 0;\r\n                dayNameElement.innerText = days[dayOfTheWeek];\r\n            }\r\n            dayNameElement.classList.add('font-xs-sm');\r\n            forecastSubcontainerElement.appendChild(dayNameElement);\r\n    \r\n            const iconElement = document.createElement('i');\r\n            const iconClasses = this.getIcon(el.weather[0].id, el.weather[0].main);\r\n            iconClasses.forEach(el => iconElement.classList.add(el));\r\n            iconElement.classList.add('font-xs-sm');\r\n            forecastSubcontainerElement.appendChild(iconElement);\r\n    \r\n            const highTemperatureElement = document.createElement('p');\r\n            highTemperatureElement.innerHTML = `${Math.round(max)}&deg;`;\r\n            highTemperatureElement.classList.add('font-xs-sm');\r\n            forecastSubcontainerElement.appendChild(highTemperatureElement);\r\n    \r\n            const lowTemperatureElement = document.createElement('p');\r\n            lowTemperatureElement.innerHTML = `${Math.round(min)}&deg;`;\r\n            lowTemperatureElement.classList.add('forecast__container--low-temp', 'font-xs-sm');\r\n            forecastSubcontainerElement.appendChild(lowTemperatureElement);\r\n    \r\n            forecastContainerElement.appendChild(forecastSubcontainerElement);\r\n        });\r\n    }\r\n\r\n    static displayLocation({location}){\r\n        const locationElement = document.querySelector('.js-location');\r\n        const locationArr = location.toLowerCase().split(' ');\r\n\r\n        if(locationArr.length === 1){\r\n            locationElement.innerHTML = `${location[0].toUpperCase()}${location.slice(1)}`;\r\n            return;\r\n        }\r\n\r\n        const capitalized = locationArr.map(el => el[0].toUpperCase() + el.substring(1));\r\n        locationElement.innerHTML = `${capitalized.join(' ')}`;\r\n    }\r\n\r\n    static displayDate({timezone}){\r\n        const dateElement = document.querySelector('.js-date');\r\n        dateElement.innerText = `${Utilities.getDateTime(timezone).toFormat(\"cccc',' LLLL d\")}`;\r\n    }\r\n\r\n    static displayTime({timezone, clockElement}){\r\n        const DateTime = luxon.DateTime;\r\n        clockElement.innerHTML = Utilities.getDateTime(timezone).toLocaleString(DateTime.TIME_WITH_SECONDS);\r\n    }\r\n}\r\n\r\nexport default RenderMethods;","import WeatherApp from './scripts/WeatherApp.js';\r\nimport AutocompleteSearchBar from './scripts/AutocompleteSearchBar.js';\r\nimport Utilities from './scripts/Utilities.js';\r\n\r\n\r\n// --- ELEMENTS ---\r\n\r\nconst buttons = {\r\n    toggleSettingsMenu: document.querySelector('.js-toggleSettingsMenu'),\r\n    closeSettingsMenu: document.querySelector('.js-closeSettingsMenu'),\r\n    settingsOptions: Array.from(document.querySelectorAll('.js-settingsOption')),\r\n    start: document.querySelector('.js-start'),\r\n    toggleFarenheit: document.querySelector('.js-toggleFarenheit'),\r\n    toggleCelsius: document.querySelector('.js-toggleCelsius'),\r\n    reset: document.querySelector('.js-reset'),\r\n    searchSubmit: document.querySelector('.js-searchSubmit'),\r\n    navToggle: document.querySelector('.js-navToggle'),\r\n    navToggleOuter: document.querySelector('.js-navToggleOuter')\r\n}\r\n\r\nconst components = {\r\n    nav: document.querySelector('.js-nav'),\r\n    weatherWrapper: document.querySelector('.js-weatherWrapper'),\r\n    loader: document.querySelector('.js-loader'),\r\n    loaderMessage: document.querySelector('.js-loaderMessage')\r\n}\r\n\r\nconst inputs = {\r\n    search: document.querySelector('.js-searchInput')\r\n}\r\n\r\nconst icons = {\r\n    settingsMenu: document.querySelector('.js-settingsIcon')\r\n}\r\n\r\nconst scripts = {\r\n    google: document.getElementById('js-google')\r\n}\r\n\r\nconst settingsContainerElement = document.querySelector('.js-settingsContainer');\r\n\r\n\r\n// --- DOM Helper Functions ---\r\n\r\nconst DOMMethods = {\r\n    toggleSearch: function(){\r\n        Utilities.toggleDisabled(inputs.search);\r\n        Utilities.toggleDisabled(buttons.searchSubmit);\r\n    },\r\n    toggleMenu: function(){\r\n        this.toggleSearch();\r\n        Utilities.toggleHidden(settingsContainerElement);\r\n    },\r\n    toggleUnitButtons: function(){\r\n        Utilities.toggleHidden(buttons.toggleFarenheit);\r\n        Utilities.toggleHidden(buttons.toggleCelsius);\r\n    },\r\n    toggleWeatherWrapper: function(){\r\n        Utilities.toggleHidden(components.weatherWrapper);\r\n    },\r\n    toggleNav: function(){\r\n        Utilities.toggleHidden(components.nav);\r\n        Utilities.toggleHidden(buttons.navToggleOuter);\r\n    },\r\n    toggleLoader: function(){\r\n        Utilities.toggleHidden(components.loader);\r\n    },\r\n    clearLoaderMessage: function(){\r\n        components.loaderMessage.innerHTML = '';\r\n    }\r\n}\r\n\r\n// --- SETUP ---\r\n\r\n// on page load, create a new instance of WeatherApp\r\nconst app = new WeatherApp();\r\n\r\n// on page load, create new autocomplete search bar\r\nconst search = new AutocompleteSearchBar(inputs.search, scripts.google, { types: ['(cities)'] });\r\n\r\n// Initial app state\r\nDOMMethods.toggleLoader();\r\nUtilities.toggleDisabled(buttons.toggleSettingsMenu);\r\n\r\nlet appIsStarted = false;\r\ninputs.search.value = '';\r\n\r\n\r\n\r\n// --- USER CONTROLS ---\r\n\r\n// start app\r\nbuttons.start.addEventListener('click', async () => {\r\n    \r\n    // prevent user from selecting animations before app is initialized\r\n    Utilities.toggleDisabled(buttons.toggleSettingsMenu);\r\n\r\n    appIsStarted = true;\r\n\r\n    // clear welcome message\r\n    DOMMethods.clearLoaderMessage();\r\n\r\n    // call app.initialize() to fetch initial data\r\n    await app.initialize()\r\n    .then(() => {\r\n        // remove loader once app is initialized\r\n        DOMMethods.toggleLoader();\r\n    });\r\n\r\n});\r\n\r\n\r\n// select new location\r\nbuttons.searchSubmit.addEventListener('click', async () => {\r\n\r\n    // do nothing if there's no search value\r\n    if(!inputs.search.value){ return; }\r\n\r\n    // clear the current clock\r\n    clearInterval(app.state.clockInterval)\r\n\r\n    // clear welcome message if present\r\n    // ErrorHandler.clearError();\r\n\r\n    // save the city/town name to app.state.location for display purposes\r\n    app.updateState('location', inputs.search.value.slice(0, inputs.search.value.indexOf(',')));\r\n\r\n    // format the location for app.updateLocationData()\r\n    const regex = /\\s|,\\s/g;\r\n    const newLocation = inputs.search.value.replaceAll(regex, '+');\r\n\r\n    // dispay Loader & disable further searches while updating data\r\n    // don't disabled loader if user manually picks location on app start\r\n    // then flag app as started\r\n    if(appIsStarted === true){\r\n        DOMMethods.toggleLoader();\r\n    } else {\r\n        appIsStarted = true;\r\n        DOMMethods.clearLoaderMessage();\r\n    }\r\n    \r\n    DOMMethods.toggleSearch();\r\n\r\n    // updata data\r\n    await app.updateLocationData(newLocation)\r\n    .then(async () => {\r\n        await app.updateWeatherData();\r\n    })\r\n    .then(() => {\r\n        // render with new data and track data for updated location\r\n        app.render();\r\n        app.keepWeatherDataUpdated();\r\n        \r\n        // clear Loader & re-enable search once new data is rendered\r\n        DOMMethods.toggleLoader();\r\n        DOMMethods.toggleSearch();\r\n\r\n        // enable settings if manual location pick at app start\r\n        buttons.toggleSettingsMenu.disabled = false;\r\n        if(components.weatherWrapper.classList.contains('hidden')){\r\n            DOMMethods.toggleWeatherWrapper();\r\n        }\r\n        \r\n    })\r\n    .catch(err => {\r\n        \r\n        // clear Loader & re-enable if search fails\r\n        alert('Invalid location. Click [Ok] then try a different location.');\r\n        DOMMethods.toggleLoader();\r\n        DOMMethods.toggleSearch();\r\n    });\r\n    \r\n});\r\n\r\n// show/hide nav\r\nbuttons.navToggle.addEventListener('click', () =>{\r\n    DOMMethods.toggleNav();\r\n});\r\n\r\nbuttons.navToggleOuter.addEventListener('click', () =>{\r\n    DOMMethods.toggleNav();\r\n});\r\n\r\n\r\n\r\n\r\n// open & close settings menu\r\nbuttons.toggleSettingsMenu.addEventListener('click', () => {\r\n    DOMMethods.toggleMenu();\r\n    app.toggleAppPause();\r\n});\r\n\r\nbuttons.closeSettingsMenu.addEventListener('click', () => {\r\n    DOMMethods.toggleMenu();\r\n    app.toggleAppPause();\r\n});\r\n\r\n\r\n// settings menu icon animations\r\nbuttons.settingsOptions.forEach(el => {\r\n    el.addEventListener('mouseover', () => {\r\n        icons.settingsMenu.className = `fas fa-${el.id}`;\r\n    });\r\n});\r\n\r\nbuttons.settingsOptions.forEach(el => {\r\n    el.addEventListener('mouseout', () => {\r\n        icons.settingsMenu.className = 'fas fa-cloud-sun';\r\n    });\r\n});\r\n\r\n\r\n// change the weather animations to reflect user choice\r\nbuttons.settingsOptions.forEach(el => {\r\n    el.addEventListener('click', () => {\r\n        app.updateState('toggledWeather', el.dataset.weather);\r\n        DOMMethods.toggleMenu();\r\n        app.toggleAppPause();\r\n        app.keepWeatherDataUpdated();\r\n        app.render();\r\n        \r\n    });\r\n})\r\n\r\n\r\n// change the weather animations to reflect current data\r\nbuttons.reset.addEventListener('click', () => {\r\n    app.updateState([\r\n        ['toggledWeather', ''],\r\n        ['timeRemainingInCycle', 60000]\r\n    ]);\r\n    app.toggleAppPause();\r\n    DOMMethods.toggleMenu();\r\n    app.render();\r\n});\r\n\r\n\r\n\r\n// display correct unit button on start based on saved user preference\r\nif(localStorage.getItem('unit') === 'celsius'){\r\n    DOMMethods.toggleUnitButtons();\r\n}\r\n\r\n// toggle units (display only) to farenheit or celsius\r\nbuttons.toggleFarenheit.addEventListener('click', () => {\r\n    app.updateState('unit', 'imperial');\r\n    localStorage.setItem('unit', 'imperial');\r\n    DOMMethods.toggleUnitButtons();\r\n    app.toggleDisplayUnits(buttons.toggleFarenheit, buttons.toggleCelsius);\r\n\r\n});\r\n\r\nbuttons.toggleCelsius.addEventListener('click', () => {\r\n    app.updateState('unit', 'celsius');\r\n    localStorage.setItem('unit', 'celsius');\r\n    DOMMethods.toggleUnitButtons();\r\n    app.toggleDisplayUnits();\r\n});","import Geocoding from \"./Geocoding.js\";\r\nimport Animations from './Animations.js';\r\nimport RenderMethods from './RenderMethods.js';\r\nimport Utilities from './Utilities.js';\r\n\r\n\r\nclass WeatherApp {\r\n    constructor(){ \r\n        this.state = {\r\n            // initial properties on creation\r\n            isPaused: false,\r\n            refreshData: '',\r\n            timeRemainingInCycle: 60000,\r\n            updateTimeRemainingInCycle: '',\r\n            clockInterval: undefined,\r\n            weather: '',\r\n            id: '',\r\n            temperature: 0,\r\n            feels_like: 0,\r\n            max: '',\r\n            min: '',\r\n            toggledWeather: '',\r\n            unit: localStorage.getItem('unit'),\r\n            timezone: '',\r\n            sunrise: 0,\r\n            sunset: 0,\r\n            forecast: '',\r\n            lat: 0,\r\n            lon: 0,\r\n            location: '',\r\n            clockElement: document.querySelector('.js-clock')\r\n        }; \r\n    }\r\n\r\n    // updateState accepts either a key and a value or an array of keys and values\r\n    updateState(...args){\r\n        // ex: updateState('key', value)\r\n        if(args.length === 2){\r\n            return this.state[args[0]] = args[1];\r\n        }\r\n\r\n        // ex: updateState([['key', value], ['key', value], etc...])\r\n        args[0].forEach((el) => {\r\n            this.state[el[0]] = el[1];\r\n        });\r\n\r\n    }\r\n\r\n    updateClock(){\r\n        clearInterval(this.state.clockInterval);\r\n        RenderMethods.displayTime(this.state);\r\n        this.updateState('clockInterval', setInterval(() => {\r\n            RenderMethods.displayTime(this.state);\r\n        }, 1000));\r\n    }\r\n\r\n    render(){\r\n        // (animations only) use user selected weather status if selected, \r\n        //   otherwise use default (actual) weather status\r\n        const weather = this.state.toggledWeather ? this.state.toggledWeather : this.state.weather;\r\n        const data = this.state;\r\n\r\n        const weatherWrapper = document.querySelector('.js-weatherWrapper');\r\n        if(weatherWrapper.classList.contains('hidden')){\r\n            Utilities.toggleHidden(weatherWrapper);\r\n        }\r\n        \r\n        // new clock instance\r\n        this.updateClock();\r\n\r\n        RenderMethods.displayDate(data);\r\n        RenderMethods.displayLocation(data);\r\n        RenderMethods.displayWeather(data);\r\n        RenderMethods.displayTemperature(data);\r\n        RenderMethods.displayForecast(data);\r\n        Animations.animateWeatherGFX(weather, data);\r\n        Animations.paintBackground(weather, data);\r\n    }\r\n\r\n    async getWeather({lat, lon}){\r\n        return new Promise(\r\n            (resolve, reject) => {\r\n                fetch(`https://blooming-sands-36961.herokuapp.com/weather?lat=${lat}&lon=${lon}`)\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    resolve(data);\r\n                })\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    async updateWeatherData(){\r\n        return await this.getWeather(this.state)\r\n        .then((data) => {\r\n            this.updateState([\r\n                ['weather', data.current.weather[0].main],\r\n                ['id', data.current.weather[0].id],\r\n                ['temperature', data.current.temp],\r\n                ['feels_like', data.current.feels_like],\r\n                ['max', data.daily[0].temp.max],\r\n                ['min', data.daily[0].temp.min],\r\n                ['today', data.daily[0]],\r\n                ['timezone', data.timezone],\r\n                ['sunrise', data.daily[0].sunrise],\r\n                ['sunset', data.daily[0].sunset],\r\n                ['forecast', data.daily]\r\n            ]);\r\n        }); \r\n    }\r\n\r\n    // keepWeatherDataUpdated fetches fresh weather data every 60 seconds\r\n    // (in sync with background animations)\r\n    // updateTimeRemeainingInCycle saves the number of ms elapsed since\r\n    // the start of the cycle (in 100ms increments) in case the app is paused,\r\n    // after which the refreshData is called again with the remaining time\r\n    // (psuedo-pause/resume)\r\n\r\n    async keepWeatherDataUpdated(wasPaused){\r\n    \r\n        // if app wasn't paused, keepWeatherDataUpdated is starting a new cycle,\r\n        //   so timeRemaininInCycle needs to be reset\r\n        if(!wasPaused){ this.state.timeRemainingInCycle = 60000; }\r\n        \r\n        // reset \r\n        clearTimeout(this.state.refreshData); \r\n        clearInterval(this.state.updateTimeRemainingInCycle);\r\n\r\n        const startNewCycle = async () => {\r\n            await this.updateWeatherData()\r\n            .then(() => {\r\n                this.render();\r\n                this.keepWeatherDataUpdated();\r\n            });\r\n        }\r\n                \r\n        // recursively call keepWeatherDataUpdated at end of cycle.\r\n        // updateTimeRemainingInCycle & refreshData may not always \r\n        //  exactly sync up, so whichever technically completes\r\n        //  a cycle first will make the next recursive call\r\n\r\n        this.state.updateTimeRemainingInCycle = setInterval(() => {\r\n            this.state.timeRemainingInCycle  -= 100;\r\n            if(this.state.timeRemainingInCycle  <= 0){\r\n                startNewCycle();\r\n            }\r\n        }, 100);\r\n\r\n        \r\n        this.state.refreshData = setTimeout(() => {\r\n            startNewCycle();\r\n        }, this.state.timeRemainingInCycle);\r\n    }\r\n\r\n    async getLocationData(){\r\n        return new Promise(\r\n            (resolve, reject) => {\r\n            \r\n                const success = (position) => {\r\n                    resolve({ lat: position.coords.latitude, lon: position.coords.longitude });\r\n                }\r\n                    \r\n                const error = (err) => {\r\n                    reject(err);\r\n                }\r\n            \r\n                if(!window.navigator.geolocation){\r\n                    alert('Geolocation is not supported by your browser.');\r\n                } else {\r\n                    window.navigator.geolocation.getCurrentPosition(success, error);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    async updateLocationData(location){\r\n        await Geocoding.geocode(location)\r\n        .then(data => {\r\n            this.updateState([\r\n                ['lat', data.results[0].geometry.location.lat],\r\n                ['lon', data.results[0].geometry.location.lng]\r\n            ]);\r\n        });\r\n    }\r\n\r\n    toggleIsPaused(){\r\n        if(this.state.isPaused){ return false; }\r\n        return true;\r\n    }\r\n\r\n    toggleAppPause(){\r\n        if(!this.state.isPaused){\r\n            this.state.isPaused = this.toggleIsPaused();\r\n            clearInterval(this.state.updateTimeRemainingInCycle);\r\n            clearTimeout(this.state.refreshData);\r\n            Animations.toggleParticleAnimations();\r\n            return;\r\n        }\r\n    \r\n        this.state.isPaused = this.toggleIsPaused();\r\n        Animations.toggleParticleAnimations();\r\n        this.keepWeatherDataUpdated(true);\r\n        return;\r\n    }\r\n\r\n    toggleDisplayUnits(){\r\n        RenderMethods.displayTemperature(this.state);\r\n        RenderMethods.displayForecast(this.state);\r\n    }\r\n\r\n    async initialize(){\r\n        \r\n        // get user latitude and longitude coords from geolocator API\r\n        await this.getLocationData()\r\n        .then(data => {\r\n            // update state with coords\r\n            this.updateState([\r\n                ['lat', data.lat],\r\n                ['lon', data.lon]\r\n            ]);\r\n        })\r\n        .then(async () => {\r\n            // use coords to get place name and add it to state\r\n            await Geocoding.reverseGeocode(this.state.lat, this.state.lon)\r\n            .then(data => this.state.location = data)\r\n        })\r\n        .then(async () => {\r\n            await this.updateWeatherData()\r\n        })\r\n        .then(() => {\r\n            // rerender DOM with updated state and disable Loader\r\n            this.render();\r\n            this.keepWeatherDataUpdated();\r\n        })\r\n        .catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport default WeatherApp;","class AutocompleteSearchBar {\r\n    constructor(searchBar, googleScript, options){\r\n        this.searchBar = searchBar;\r\n        this.googleScript = googleScript;\r\n        this.options =  options;\r\n        this.googleScript = googleScript;\r\n        this.googleScript.addEventListener('load', () => {\r\n            this.autocomplete = new google.maps.places.Autocomplete(this.searchBar, this.options);\r\n            google.maps.event.clearInstanceListeners(this.searchBar);\r\n            google.maps.event.addListener(this.autocomplete, 'place_changed', () => {\r\n                let place = this.autocomplete.getPlace();\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport default AutocompleteSearchBar;"],"names":["$2214b3b609affb3d85be895f89bbdf0d$export$default","location","Promise","resolve","reject","fetch","then","response","json","data","catch","err","lat","lon","API","results","address_components","long_name","$4fe949273a39baaa8f82456c8c163d9c$export$default","timezone","luxon","DateTime","now","setZone","num","hour","this","getDateTime","a","j","x","i","length","Math","floor","random","element","classList","toggle","disabled","$6d15a61f326ea522701ff17707c0d295$export$default","document","querySelector","defaultColorPalette","defaultGrayScalePalette","particles","Array","from","getElementsByClassName","forEach","el","remove","type","classes","speed","particle","createElement","alt","style","left","top","animationDelay","animationDuration","add","background","appendChild","numClouds","clouds","shuffle","day","isDay","cloud","src","lightning","lightningInterval","clearInterval","setInterval","setTimeout","weatherClass","atmosphereLayer1","atmosphereLayer2","weather","id","clearParticles","drawClouds","getNumClouds","drawParticles","drawLightning","drawAtmosphere","console","error","startTime","endTime","numStages","arr","fraction","push","round","stages","currentTime","stage","index","b","c","colors","nearestStages","calc","colorA","colorB","multiplicand","val","mult","percentToNextStage","newColor","color","sunrise","sunset","colorPalette","grayScalePalette","foregroundImageElement","opacity","Date","setColor","getStages","getNearestStages","calculateColor","slice","reverse","$ec2b65434a6944213332012a5a48eaec$export$default","status","clear","Number","parseInt","displayWeather","weatherIconElement","weatherStatusElement","getIcon","innerHTML","displayTemperature","temperature","feels_like","max","min","unit","temperatures","map","toCelsius","deg","displayForecast","forecast","dailyForecasts","rootElement","firstChild","forecastTitleElement","innerText","forecastContainerElement","days","dayOfTheWeek","getUTCDay","temp","forecastSubcontainerElement","dayNameElement","iconElement","main","highTemperatureElement","lowTemperatureElement","displayLocation","locationElement","locationArr","toLowerCase","split","toUpperCase","capitalized","substring","join","displayDate","toFormat","displayTime","clockElement","toLocaleString","TIME_WITH_SECONDS","$f35a29a5826ad83a3357c8588b24fc2e$var$buttons","toggleSettingsMenu","closeSettingsMenu","settingsOptions","querySelectorAll","start","toggleFarenheit","toggleCelsius","reset","searchSubmit","navToggle","navToggleOuter","$f35a29a5826ad83a3357c8588b24fc2e$var$components","nav","weatherWrapper","loader","loaderMessage","$f35a29a5826ad83a3357c8588b24fc2e$var$inputs","search","$f35a29a5826ad83a3357c8588b24fc2e$var$icons","settingsMenu","$f35a29a5826ad83a3357c8588b24fc2e$var$scripts","google","getElementById","$f35a29a5826ad83a3357c8588b24fc2e$var$settingsContainerElement","$f35a29a5826ad83a3357c8588b24fc2e$var$DOMMethods","toggleSearch","toggleDisabled","toggleMenu","toggleHidden","toggleUnitButtons","toggleWeatherWrapper","toggleNav","toggleLoader","clearLoaderMessage","$f35a29a5826ad83a3357c8588b24fc2e$var$app","constructor","state","isPaused","refreshData","timeRemainingInCycle","updateTimeRemainingInCycle","clockInterval","undefined","toggledWeather","localStorage","getItem","updateState","args","updateClock","render","contains","animateWeatherGFX","paintBackground","getWeather","current","daily","wasPaused","clearTimeout","startNewCycle","async","updateWeatherData","keepWeatherDataUpdated","success","position","coords","latitude","longitude","window","navigator","geolocation","getCurrentPosition","alert","geocode","geometry","lng","toggleIsPaused","toggleAppPause","toggleParticleAnimations","toggleDisplayUnits","getLocationData","reverseGeocode","$f35a29a5826ad83a3357c8588b24fc2e$var$search","searchBar","googleScript","options","addEventListener","autocomplete","maps","places","Autocomplete","event","clearInstanceListeners","addListener","getPlace","types","$f35a29a5826ad83a3357c8588b24fc2e$var$appIsStarted","value","initialize","indexOf","newLocation","replaceAll","updateLocationData","className","dataset","setItem"],"version":3,"file":"index.184a768d.js.map"}